{ lib, pkgs }:

with lib;

{
  enable = mkEnableOption "Enable a full-tunnel StrongSwan VPN server.";

  remoteId = mkOption {
    type = pkgs.lib.types.nonEmptyStr;
    example = "vpn.example.org";
    description = ''
      The remote ID used by clients to describe the server
      ("Remote ID" string, in macOS and iOS). This should
      probably be the server's FQDN.
    '';
  };

  dns = mkOption {
    type = types.listOf (types.either pkgs.lib.types.ipv4NoCIDR pkgs.lib.types.ipv6NoCIDR);
    default = [ "8.8.8.8" "2001:4860:4860::8844" ];
    description = ''
      DNS servers to be pushed to StrongSwan clients.
    '';
  };

  ipv4ClientCidr = mkOption {
    type = pkgs.lib.types.ipv4CIDR;
    example = "10.0.1.0/24";
    description = ''
      The base of the IPv4 address range that will be used for
      StrongSwan clients, in CIDR format.
    '';
  };

  ipv6ClientPrefix = mkOption {
    type = pkgs.lib.types.ipv6CIDR;
    example = "2001:DB8::1:0/112";
    description = ''
      The IPv6 prefix from which IPv6 addresses will be assigned
      for StrongSwan clients.
    '';
  };

  caFile = mkOption {
    type = types.path;
    description = ''
      A path to the CA certificate used to authenticate client
      certificates for the StrongSwan server.
    '';
  };

  certFile = mkOption {
    type = types.path;
    description = ''
      A path to the StrongSwan server's public certificate.
    '';
  };

  certKeyFile = mkOption {
    type = types.nullOr pkgs.lib.types.nonStorePath;
    default = null;
    example = literalExample toString ./vpn-cert.key;
    description = ''
      A path to a file containing the server's private key. Note that
      this file will not be copied to the Nix store. However, upon
      start-up, the service will copy the key to its persistent state
      directory.

      Note: either <option>certKeyFile</option> or
      <option>certKeyLiteral</option> must be non-null, but not both.
    '';
  };

  certKeyLiteral = mkOption {
    type = types.nullOr pkgs.lib.types.nonEmptyStr;
    default = null;
    example = "<key>";
    description = ''
      The server's private key, as a string literal. Note that this
      secret will not be copied to the Nix store. However, upon
      start-up, the service will copy a file containing the key to its
      persistent state directory.

      Note: either <option>certKeyFile</option> or
      <option>certKeyLiteral</option> must be non-null, but not both.
    '';
  };

  crlFile = mkOption {
    type = types.path;
    description = ''
      A path to the CA's CRL file, for revoked certs.
    '';
  };

  description = ''
    A declarative StrongSwan IKEv2 "full-tunnel" server.

    IPv4 traffic that is routed to a full-tunnel StrongSwan server
    will be NATed to the server's public IPv4 address. IPv6 traffic
    will be routed normally and clients will be given a public IPv6
    address from the pool assigned to the StrongSwan server.

    This server is configured to listen on the standard IKEv2 UDP
    ports 500 and 4500.
    
    Note that the configuration generated by this module has only been
    tested with iOS and macOS devices.
  '';
}
